    symbol x("x"), y("y"), u("u");
    //总容器 
    vector<Point2D_n> I;
    vector<RectBlock> Xill;
    numeric esp;
    //
    RectBlock r1(0, 1, 0, 1);
    ex F1 = x + y;   // 简单多项式示例
    ex F2 = pow(x, 2) + y;
    ex h ;
    ex res = resultant_inner(F1,h,x,y,u,r1,lt);
    
    cout <<F2.degree(x) << endl;
    cout << "F1(x,y) = " << F1 << endl;
    cout << "消去x后的多项式：" << res << endl;
    cout << "消去x后的多项式2：" << resultant_outside(F1,F2,x) << endl;

  


    ex f1 = y - pow(x,2);
    ex f2 = y + pow(x,2) - 2;
    numeric xr(1, 1e16);
    numeric yt(1, 1e16);
    // 定义包含交点的矩形区域：x∈[0,2]，y∈[0,2]
    RectBlock rect(1, 1, 1, 1);

    // 计算交点数量
    int result = count_curve_intersections(f1, f2, x, y, rect);

    // 输出结果
    cout << "测试样例：两条直线 y=x 和 y=-x+2 在矩形 [0,2]×[0,2] 内的交点数量" << endl;
    cout << "预期结果：1" << endl;
    cout << "实际计算结果：" << result << endl;


    // 参数 t (控制圆的接近程度)
 
    numeric t(1,1e15);
    numeric half(1, 2); // 明确表示 1/2

    // 构造两个圆的方程 (Example 4.2)
    ex f11 = pow(x - half, 2) + pow(y - half - t, 2) - 2 * pow(t, 2);
    ex f22 = pow(x - half, 2) + pow(y - half + t, 2) - 2 * pow(t, 2);

    // 打印方程
    cout << "f1 = " << f11 << endl;
    cout << "f2 = " << f22 << endl;

    // 设置包含交点的矩形区域 (围绕 (0.5, 0.5))
    numeric epsilon(1,1e6); // 区域大小
    numeric eps = numeric(1, 100000000); // 10^-8

    numeric bound(1,1e9); // 1/(2^27) = 1/134217728 ≈ 7.45e-9

    RectBlock rect2(
        half - bound, // x_l = 0.5 - 7.45e-9
        half,         // x_r = 0.5
        half - bound, // y_b = 0.5 - 7.45e-9
        half         // y_t = 0.5
    );

    cout << "计算区域: ["
        << rect2.x_l << ", " << rect2.x_r << "] x ["
        << rect2.y_b << ", " << rect2.y_t << "]" << endl;

    // 计算交点数量
    int num_intersections = count_curve_intersections(f11, f22, x, y, rect2);

    cout << "==================================" << endl;
    cout << "交点数量: " << num_intersections << endl;
    cout << "==================================" << endl;
    cout << "测试区域: ["
        << rect2.x_l << ", " << rect2.x_r << "] x ["
        << rect2.y_b << ", " << rect2.y_t << "]" << endl;

    // 使用 SturmSeqVerification 函数计算交点
    queue<Point2D_n> intersections = SturmSeqVerification(f11, f22, x, y, rect2, eps);

    // 输出结果
    cout << "找到的交点数量: " << intersections.size() << endl;
    cout << "交点坐标: " << endl;

    int count = 1;
    while (!intersections.empty()) {
        Point2D_n p = intersections.front();
        intersections.pop();
        cout << "交点 " << count++ << ": (" << p.x << ", " << p.y << ")" << endl;
    }

    //
    ex j;
    double d = 0.3333;
    
    j = d_to_rational(d);
    cout << j << endl;
    ex fff= (4 * x - 2, 2) - 4 * y + 1;
    RectBlock rectfff(0, 1, 0, 1);
    cout << computeBBForm(fff, rectfff);

    
    
    return 0;
